# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robomuse/chapter2_msg1.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class chapter2_msg1(genpy.Message):
  _md5sum = "1b257d9da54433962cd96747b8ec421c"
  _type = "robomuse/chapter2_msg1"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 A
int32 B
int32 th
int32 vx
int32 vy
int32 vth

"""
  __slots__ = ['A','B','th','vx','vy','vth']
  _slot_types = ['int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       A,B,th,vx,vy,vth

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(chapter2_msg1, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.A is None:
        self.A = 0
      if self.B is None:
        self.B = 0
      if self.th is None:
        self.th = 0
      if self.vx is None:
        self.vx = 0
      if self.vy is None:
        self.vy = 0
      if self.vth is None:
        self.vth = 0
    else:
      self.A = 0
      self.B = 0
      self.th = 0
      self.vx = 0
      self.vy = 0
      self.vth = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_6i.pack(_x.A, _x.B, _x.th, _x.vx, _x.vy, _x.vth))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.A, _x.B, _x.th, _x.vx, _x.vy, _x.vth,) = _struct_6i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_6i.pack(_x.A, _x.B, _x.th, _x.vx, _x.vy, _x.vth))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.A, _x.B, _x.th, _x.vx, _x.vy, _x.vth,) = _struct_6i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6i = struct.Struct("<6i")
