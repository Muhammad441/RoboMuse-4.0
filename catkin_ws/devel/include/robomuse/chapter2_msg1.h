// Generated by gencpp from file robomuse/chapter2_msg1.msg
// DO NOT EDIT!


#ifndef ROBOMUSE_MESSAGE_CHAPTER2_MSG1_H
#define ROBOMUSE_MESSAGE_CHAPTER2_MSG1_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robomuse
{
template <class ContainerAllocator>
struct chapter2_msg1_
{
  typedef chapter2_msg1_<ContainerAllocator> Type;

  chapter2_msg1_()
    : A(0)
    , B(0)
    , th(0)
    , vx(0)
    , vy(0)
    , vth(0)  {
    }
  chapter2_msg1_(const ContainerAllocator& _alloc)
    : A(0)
    , B(0)
    , th(0)
    , vx(0)
    , vy(0)
    , vth(0)  {
  (void)_alloc;
    }



   typedef int32_t _A_type;
  _A_type A;

   typedef int32_t _B_type;
  _B_type B;

   typedef int32_t _th_type;
  _th_type th;

   typedef int32_t _vx_type;
  _vx_type vx;

   typedef int32_t _vy_type;
  _vy_type vy;

   typedef int32_t _vth_type;
  _vth_type vth;




  typedef boost::shared_ptr< ::robomuse::chapter2_msg1_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robomuse::chapter2_msg1_<ContainerAllocator> const> ConstPtr;

}; // struct chapter2_msg1_

typedef ::robomuse::chapter2_msg1_<std::allocator<void> > chapter2_msg1;

typedef boost::shared_ptr< ::robomuse::chapter2_msg1 > chapter2_msg1Ptr;
typedef boost::shared_ptr< ::robomuse::chapter2_msg1 const> chapter2_msg1ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robomuse::chapter2_msg1_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robomuse::chapter2_msg1_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robomuse

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'robomuse': ['/home/dell/catkin_ws/src/robomuse/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robomuse::chapter2_msg1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robomuse::chapter2_msg1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robomuse::chapter2_msg1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robomuse::chapter2_msg1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robomuse::chapter2_msg1_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robomuse::chapter2_msg1_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robomuse::chapter2_msg1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1b257d9da54433962cd96747b8ec421c";
  }

  static const char* value(const ::robomuse::chapter2_msg1_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1b257d9da5443396ULL;
  static const uint64_t static_value2 = 0x2cd96747b8ec421cULL;
};

template<class ContainerAllocator>
struct DataType< ::robomuse::chapter2_msg1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robomuse/chapter2_msg1";
  }

  static const char* value(const ::robomuse::chapter2_msg1_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robomuse::chapter2_msg1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 A\n\
int32 B\n\
int32 th\n\
int32 vx\n\
int32 vy\n\
int32 vth\n\
\n\
";
  }

  static const char* value(const ::robomuse::chapter2_msg1_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robomuse::chapter2_msg1_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.A);
      stream.next(m.B);
      stream.next(m.th);
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.vth);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct chapter2_msg1_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robomuse::chapter2_msg1_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robomuse::chapter2_msg1_<ContainerAllocator>& v)
  {
    s << indent << "A: ";
    Printer<int32_t>::stream(s, indent + "  ", v.A);
    s << indent << "B: ";
    Printer<int32_t>::stream(s, indent + "  ", v.B);
    s << indent << "th: ";
    Printer<int32_t>::stream(s, indent + "  ", v.th);
    s << indent << "vx: ";
    Printer<int32_t>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<int32_t>::stream(s, indent + "  ", v.vy);
    s << indent << "vth: ";
    Printer<int32_t>::stream(s, indent + "  ", v.vth);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOMUSE_MESSAGE_CHAPTER2_MSG1_H
